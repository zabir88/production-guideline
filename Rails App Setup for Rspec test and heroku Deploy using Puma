TESTS:
For Rpec Test suite setup:

Step 1 Add GEMs:
group :developement, :test do
	gem 'rspec-rails', '~> 3.0.0'
  	gem 'factory_girl_rails'
end
group :test do
  gem 'faker'
  gem 'capybara'
  gem 'daabase_cleaner'	
end

Step 2 Rspec Config: 
$ rails generate rspec:install

Step 3 Configure Capybara: 
add require 'capybara/rails' to spec/rails_helper.rb

Step 4 Include the factory_girl methods: 
add config.include FactoryGirl::Syntax::Methods to spec/rails_helper.rb under RSpec.configure

Step 5 Include configs for database_cleaner in spec/rails_helper.rb
config.before(:suite) do
  DatabaseCleaner.clean_with(:truncation)
end
config.before(:each) do
  DatabaseCleaner.strategy = :transaction
end
config.before(:each, :js => true) do
  DatabaseCleaner.strategy = :truncation
end
config.before(:each) do
  DatabaseCleaner.start
end
config.after(:each) do
  DatabaseCleaner.clean
end

Writing Tests

Start with Model spec.
Proceed to Controller spec.

Model spec

Step 1 Setting up test data in factories:
Add spec/factories/name_of_relation.rb. Inside the file add
FactoryGirl.define do
  factory :name_of_model do 
    attribute 1   { Faker::}
    attribute 2   { Faker::}
  end
end 
Faker gem generates data.

Step 2 Testing validation in the model:
Add spec/models/model_name_spec.rb. Insisde start with valid factory and then valid other validations.

Step 3 Testing Methods in the model: 
Add spec/models/model_name_spec.rb. Inside write tests for testing methods.

Controller spec

Step 1 Setting up test data:
Usually in the same file as before spec/factories/name_of_relation.rb 

Step 2 Testing GET, POST, PUT, DELETE methods:
Add spec/controllers/modelnameinplural_controller_spec.rb. Include all tests here.

PRODUCTION

For Heroku deployment setup:

Step 1 Add GEMS
group :production do
	gem 'pg', '~> 0.15'
	gem 'rails_12factor', '~> 0.0.3'
	gem 'puma', '~> 2.16'
end

Step 2 run $ heroku create name_of _your_app

Step 3 verify remote $ git remote -v

step 4 Deploy $ git push heroku master

step 5 Migrate your database $heroku run rake db:migrate

step 6 Add Procfile to use puma webserver $echo > Procfile

step 7 In the Procfile write web: $ bundle exec puma -t 5:5 -p ${PORT:-3000} -e ${RACK_ENV:-development}

step 8 In the command shell run  
$ echo "RACK_ENV=development" >>.env
$ echo "PORT=3000" >> .env

step 9 In the command shell run 
$ echo ".env" >> .gitignore
$ git add .gitignore
$ git commit -m "add .env to .gitignore"

step 10 Run the following
$ git add -A
$ git commit -m "use puma via procfile"
$ git push heroku master

Step 11 Precompile Assets run 
$ RAILS_ENV=production rake assets:precompile
$ git add -A
$ git commit -m "compiled assets for heroku" 

Step 12 To clean up temp files and assets


Useful commands
$ rake assets:clobber
$ rake tmp:clear
$ rake tmp:cache:clear
$ rake tmp:session:clear
$ rake tmp:sockets:clear
$ rake db:session:clear 
  

  





  



